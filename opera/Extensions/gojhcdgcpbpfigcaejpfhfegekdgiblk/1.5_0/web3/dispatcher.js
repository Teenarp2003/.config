"use strict";function makeRpcConnectionError(e){if("undefined"===typeof e)return null;const t={code:4100,message:"The requested account and/or method has not been authorized by the user."};return{error:t,id:e,jsonrpc:"2.0"}}function shouldAttemptToConnect(e,t){return 0===e||2===e&&("eth_accounts"===t.method||"eth_requestAccounts"===t.method)}function connectStateTransition(e){return 0===e||2===e?1:e}function disconnectStateTransition(e){return 3===e?0:1===e?2:e}class Web3MessageForwarder{providerPort;servicePort=null;state=0;constructor(e){this.providerPort=e,this.providerPort.onmessage=e=>this.onProviderMessage(e.data)}onProviderMessage(e){if(!this.servicePort&&shouldAttemptToConnect(this.state,e)&&this.connectToService(),this.servicePort)try{this.servicePort.postMessage(e)}catch{this.onServiceDisconnected()}if(!this.servicePort){const t=makeRpcConnectionError(e.id);t&&this.providerPort.postMessage(t)}}connectToService(){this.servicePort=chrome.runtime.connect({name:"web3provider"}),this.servicePort.onMessage.addListener(this.onServiceMessage.bind(this)),this.servicePort.onDisconnect.addListener(this.onServiceDisconnected.bind(this)),this.state=connectStateTransition(this.state)}onServiceMessage(e){this.state=3,this.providerPort.postMessage(e)}onServiceDisconnected(){this.servicePort=null,this.state=disconnectStateTransition(this.state)}}function acceptProviderConnection(){return new Promise((e=>{const t=r=>{"InitializeOperaCryptoWalletWeb3Provider"===r.data&&(window.removeEventListener("message",t),e(r.ports[0]))};window.addEventListener("message",t)}))}function injectProvider(){const e=document.createElement("script"),t=e=>e.target.remove();e.onload=e.onerror=t,e.src=chrome.runtime.getURL("web3/provider.js"),(document.head||document.documentElement).appendChild(e)}acceptProviderConnection().then((e=>{new Web3MessageForwarder(e)})),injectProvider();